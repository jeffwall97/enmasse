#!/usr/bin/env groovy
def lib
def AGENT = null

node('master') {
    stage('Set agent label') {
        AGENT = ghprbCommentBody.contains("debug=true") ? "${params.AGENT_LABEL}-debug" : "${params.AGENT_LABEL}"
        echo "This agent label will be used: ${AGENT}"
    }
}


pipeline {
//    parameters {
//        //execute all tests as default for each new Pull request
//        string(name: 'TEST_CASE', defaultValue: '', description: 'maven parameter for executing specific tests')
//        string(name: 'TEST_PROFILE', defaultValue: 'systemtests-pr', description: 'maven profile for tests')
//        string(name: 'UPGRADE_FROM', defaultValue: '0.26.2', description: 'base version which is upgraded')
//        string(name: 'AGENT_LABEL', defaultValue: 'enmasse', description: 'label of openstack agent')
//        string(name: 'DEBUG', defaultValue: 'false', description: 'skip post actions')
//    }
    options {
        timeout(time: 10, unit: 'HOURS')
        ansiColor('xterm')
    }
    environment {
        DOCKER_REGISTRY = '172.30.1.1:5000'
        DOCKER_ORG = 'enmasseci'
        TAG = "${BUILD_TAG}"
        CORES_DIR = "/tmp/cores"
        ARTIFACTS_DIR = 'artifacts'
        ANSIBLE_FORCE_COLOR = true
        OPENSHIFT_PROJECT = "enmasse-infra"
        USE_DUMMY_ADDRESS = true
    }
    agent {
        node {
            label "${AGENT}"
        }
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('wait for agent ready') {
            steps {
                script {
                    lib = evaluate readFile('.jenkins/jenkins-functions.groovy')
                    lib.waitUntilAgentReady()
                }
            }
        }
        stage('parse parameters from comment') {
            steps {
                script {
                    if (env.ghprbCommentBody.contains('testcase=')) {
                        env.TEST_CASE = env.ghprbCommentBody.split('testcase=')[1].split(/\s/)[0]
                    } else {
                        env.TEST_CASE = params.TEST_CASE
                    }
                    if (env.ghprbCommentBody.contains('profile=')) {
                        env.TEST_PROFILE = env.ghprbCommentBody.split('profile=')[1].split(/\s/)[0]
                    } else {
                        env.TEST_PROFILE = params.TEST_PROFILE
                    }
                    if (env.ghprbCommentBody.contains('upgrade_from=')) {
                        env.UPGRADE_FROM = env.ghprbCommentBody.split('upgrade_from=')[1].split(/\s/)[0]
                    } else {
                        env.UPGRADE_FROM = params.UPGRADE_FROM
                    }
                    if (env.ghprbCommentBody.contains('debug=true')) {
                        env.DEBUG = 'true'
                        env.SKIP_CLEANUP = 'true'
                    } else {
                        env.DEBUG = params.DEBUG
                    }
                    echo "TEST_CASE: ${env.TEST_CASE}"
                    echo "TEST_PROFILE: ${env.TEST_PROFILE}"
                    echo "UPGRADE_FROM: ${env.UPGRADE_FROM}"
                    echo "DEBUG: ${env.DEBUG}"
                }
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        lib.startOpenshift()
                    }
                }
            }
        }
        stage('build') {
            steps {
                script {
                    lib.buildEnmasse()
                }
            }
        }
        stage('push docker images') {
            steps {
                sh 'oc login -u test -p test --server localhost:8443 --insecure-skip-tls-verify'
                sh 'oc new-project enmasseci'
                sh '$DOCKER login -u unused -p `oc whoami -t` $DOCKER_REGISTRY'
                sh 'make docker_push'
            }
        }

        //----------------------------------------------------------------------------------------------------
        // upgrade PR build
        //----------------------------------------------------------------------------------------------------
        stage('[upgrade] download released version') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            steps {
                sh "git checkout -- agent && git checkout tags/${env.UPGRADE_FROM}"
                sh "sh ./systemtests/scripts/download_released_enmasse.sh ${env.UPGRADE_FROM}"
            }
        }
        stage('[upgrade] deploy enmasse') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.installEnmasse(env.UPGRADE_FROM, false, false, false)
                    }
                }
            }
        }
        stage('[upgrade] run systemtests before upgrade') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            environment {
                USE_DUMMY_ADDRESS = true
                SKIP_CLEANUP = true
                SYSTEMTESTS_UPGRADED = false
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.CORES_DIR, 'systemtests-upgrade', 'upgrade.**')
                    }
                }
            }
        }
        stage('[upgrade] upgrade enmasse') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            environment {
                TAG = "${BUILD_TAG}"
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh "git checkout ${sha1}"
                        sh "make imageenv"
                        lib.installEnmasse(env.TAG, true, true, true)
                    }
                }
            }
        }
        stage('[upgrade] run systemtests after upgrade') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            environment {
                USE_DUMMY_ADDRESS = true
                SKIP_CLEANUP = true
                SYSTEMTESTS_UPGRADED = true
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.CORES_DIR, 'systemtests-upgrade', 'upgrade.**')
                    }
                }
            }
        }
        stage('[upgrade] download released version again') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            steps {
                sh "sh ./systemtests/scripts/download_released_enmasse.sh ${env.UPGRADE_FROM}"
            }
        }
        stage('[upgrade] downgrade enmasse') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            environment {
                TAG = "${env.UPGRADE_FROM}"
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        sh "git checkout tags/${env.UPGRADE_FROM}"
                        lib.installEnmasse(env.UPGRADE_FROM, true, true, false)
                    }
                }
            }
        }
        stage('[upgrade] run systemtests after downgrade') {
            when {
                expression { env.TEST_PROFILE == 'systemtests-upgrade' }
            }
            environment {
                USE_DUMMY_ADDRESS = true
                SKIP_CLEANUP = false
                SYSTEMTESTS_UPGRADED = true
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.CORES_DIR, 'systemtests-upgrade', 'upgrade.**')
                    }
                }
            }
        }
        //----------------------------------------------------------------------------------------------------
        // standard PR build
        //----------------------------------------------------------------------------------------------------
        stage('[PR] install enmasse') {
            when {
                expression { env.TEST_PROFILE != 'systemtests-upgrade' }
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.installEnmasse(env.TAG, false, false, true, env.TEST_PROFILE == 'systemtests-shared-iot')
                    }
                }
            }
        }
        stage('[PR] system tests') {
            when {
                expression { env.TEST_PROFILE != 'systemtests-upgrade' }
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    script {
                        lib.runSystemtests(env.CORES_DIR, env.TEST_PROFILE, env.TEST_CASE)
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                lib.postAction(env.CORES_DIR, env.ARTIFACTS_DIR, env.DEBUG)
            }
        }
        failure {
            echo "build failed"
        }
    }
}
